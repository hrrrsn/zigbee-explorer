name: Build and  Release

on:
  # push:
  #   branches: [ "main" ]
  #   paths-ignore:
  #     - '.*/**'
  #     - 'renovate.json'
  #     - 'LICENSE'
  #     - 'README.md'
  #     - '.gitignore'
  workflow_dispatch:

jobs:
  set-version:
    name: Configure Build
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.node-version.outputs.NODE_VERSION }}
      version: ${{ steps.version.outputs.VERSION }}
      build: ${{ steps.version.outputs.BUILD }}
    steps:
      - uses: actions/checkout@v4
      - name: Set version number
        id: version
        run: |
          VERSION=$(jq -r .version package.json)
          BUILD="$VERSION-${{ github.run_number }}"
          echo "::set-output name=VERSION::$VERSION"
          echo "::set-output name=BUILD::$BUILD"
          COMMIT=$(git rev-parse --short HEAD)
          echo "{\"version\":\"$VERSION\",\"build\":\"$BUILD\",\"commit\":\"$COMMIT\"}" > build.json
          cat build.json
      - name: Set Node version
        id: node-version
        run: |
          NODE_VERSION=$(grep -oP '(?<=FROM node:)\d+\.\d+\.\d+' Dockerfile)
          echo "::set-output name=NODE_VERSION::$NODE_VERSION"
      - name: Upload build.json as artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-info
          path: build.json

  build-linux: 
    name: Build - Linux
    needs: set-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download build.json
        uses: actions/download-artifact@v3
        with:
          name: build-info
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.set-version.outputs.node_version }}
      - name: Install Electron build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenjp2-tools rpm libarchive-tools
          npm install
      - name: Build Electron app (Linux)
        run: |
          BUILD_NUMBER=${{ needs.set-version.outputs.build }}
          jq --arg version "$BUILD_NUMBER" '.version = $version' package.json > package.tmp && mv package.tmp package.json
          npm run linux
      - name: Post-build clean up
        run: rm -f dist/*.blockmap
      - name: Upload Linux Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*-linux-*
          tag_name: ${{ needs.set-version.outputs.build }}
          name: ${{ needs.set-version.outputs.build }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-mac:
    name: Build - macOS
    needs: set-version
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download build.json
        uses: actions/download-artifact@v3
        with:
          name: build-info
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.set-version.outputs.node_version }}
      - name: Install dependencies
        run: |
          npm install
          curl https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-macos-$(uname -m) -L -o jq
          chmod +x jq
      - name: Build Electron app (macOS)
        run: |
          BUILD_NUMBER=${{ needs.set-version.outputs.build }}
          ./jq --arg version "$BUILD_NUMBER" '.version = $version' package.json > package.tmp && mv package.tmp package.json
          mv 'LICENSE' 'license_en.txt'
          ./jq '.files += ["license_en.txt"]' package.json > package.tmp && mv package.tmp package.json
          npm run macos
      - name: Post-build clean up
        run: rm -f dist/*.blockmap
      - name: Upload macOS Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*-macOS-*
          tag_name: ${{ needs.set-version.outputs.build }}
          name: ${{ needs.set-version.outputs.build }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build - Windows
    needs: set-version
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download build.json
        uses: actions/download-artifact@v3
        with:
          name: build-info
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.set-version.outputs.node_version }}
      - name: Install dependencies
        run: npm install
      - name: Build Electron app (Windows)
        shell: pwsh
        run: |
          $BUILD_NUMBER = '${{ needs.set-version.outputs.build }}'
          # donwload jq.exe
          Invoke-WebRequest -Uri "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-windows-amd64.exe" -OutFile jq.exe
          Get-Content package.json | .\jq.exe --arg version "$BUILD_NUMBER" '.version = $version' | Set-Content package.tmp
          Remove-Item package.json
          Move-Item package.tmp package.json
          npm run windows
      - name: Post-build clean up
        run: Remove-Item -Path dist\*.blockmap
      - name: Upload Windows Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*-windows-*
          tag_name: ${{ needs.set-version.outputs.build }}
          name: ${{ needs.set-version.outputs.build }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build - Docker
    needs: set-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Electron app (Linux)
        run: |
          BUILD_NUMBER=${{ needs.set-version.outputs.build }}
          jq --arg version "$BUILD_NUMBER" '.version = $version' package.json > package.tmp && mv package.tmp package.json
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.9.0
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.set-version.outputs.version }}
            ghcr.io/${{ github.repository }}:${{ needs.set-version.outputs.build }}
            ghcr.io/${{ github.repository }}:latest
          platforms: linux/amd64,linux/arm64